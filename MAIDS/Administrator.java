package ALLEN_CODE;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import java.sql.ResultSet;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author allen
 */
public class Administrator extends javax.swing.JFrame {

    /**
     * Creates new form Administrator
     */
    public Administrator() {
        initComponents();
        startRealTimeUpdate();
        try {
            Connectivity();
            this.loadData();
        } catch (SQLException ex) {
            Logger.getLogger(Administrator.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void startRealTimeUpdate() {
        // Create a timer that triggers every second (1000 milliseconds)
        Timer timer = new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Update lbl_DateToday with the current date and time
                LocalDate today = LocalDate.now();
                jLabel3.setText("Date : " + today.toString());
            }
        });

        // Start the timer
        timer.start();
    }

    Connection con;
    /* SQL Statement */
    Statement st;
    PreparedStatement pst;
    ResultSet rs;

    private static final String DBname = "maids_database";
    private static final String DBdriver = "com.mysql.cj.jdbc.Driver";
    private static final String DBurl = "jdbc:mysql://localhost:3306/" + DBname;
    private static final String DBIDNumber = "root";
    private static final String DBPassword = "";

    public void Connectivity() throws SQLException {

        try {
            Class.forName(DBdriver);
            con = DriverManager.getConnection(DBurl, DBIDNumber, DBPassword);
            st = con.createStatement();
            if (con != null) {
                System.out.println("Connection Successful");
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Administrator.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSpinner1 = new javax.swing.JSpinner();
        label1 = new java.awt.Label();
        jPanel1 = new javax.swing.JPanel();
        lbl_patientLabel = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        info_tbl = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        lbl_firstName = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lbl_lastName = new javax.swing.JLabel();
        btn_insert = new javax.swing.JButton();
        lbl_Status = new javax.swing.JLabel();
        btn_update = new javax.swing.JButton();
        btn_clr = new javax.swing.JButton();
        btn_dlte = new javax.swing.JButton();
        btn_back = new javax.swing.JButton();
        txt_lastName = new javax.swing.JTextField();
        txt_firstName = new javax.swing.JTextField();
        lbl_patientLabel1 = new javax.swing.JLabel();
        check_Nurse = new javax.swing.JCheckBox();
        check_Doctor = new javax.swing.JCheckBox();

        label1.setText("label1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        lbl_patientLabel.setFont(new java.awt.Font("Myanmar Text", 1, 24)); // NOI18N
        lbl_patientLabel.setForeground(new java.awt.Color(0, 153, 153));
        lbl_patientLabel.setText("STAFF DATABASE");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 427, Short.MAX_VALUE)
        );

        info_tbl.setBackground(new java.awt.Color(255, 255, 255));
        info_tbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "First Name", "Last Name", "Profession"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        info_tbl.setSelectionBackground(new java.awt.Color(0, 153, 153));
        info_tbl.setSelectionForeground(new java.awt.Color(255, 255, 255));
        info_tbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                info_tblMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(info_tbl);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(207, 207, 207)
                        .addComponent(lbl_patientLabel))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 558, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(31, 31, 31)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(lbl_patientLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(105, 105, 105)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(23, 23, 23))
        );

        jPanel2.setBackground(new java.awt.Color(0, 153, 153));

        lbl_firstName.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lbl_firstName.setForeground(new java.awt.Color(255, 255, 255));
        lbl_firstName.setText("Enter First Name");

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Date :");

        lbl_lastName.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lbl_lastName.setForeground(new java.awt.Color(255, 255, 255));
        lbl_lastName.setText("Enter Last Name");

        btn_insert.setBackground(new java.awt.Color(172, 216, 230));
        btn_insert.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btn_insert.setText("Insert");
        btn_insert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_insertActionPerformed(evt);
            }
        });

        lbl_Status.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lbl_Status.setForeground(new java.awt.Color(255, 255, 255));
        lbl_Status.setText("Status");
        lbl_Status.setToolTipText("");

        btn_update.setBackground(new java.awt.Color(172, 216, 230));
        btn_update.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btn_update.setText("Update");
        btn_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_updateActionPerformed(evt);
            }
        });

        btn_clr.setBackground(new java.awt.Color(172, 216, 230));
        btn_clr.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btn_clr.setText("Clear");
        btn_clr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_clrActionPerformed(evt);
            }
        });

        btn_dlte.setBackground(new java.awt.Color(172, 216, 230));
        btn_dlte.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btn_dlte.setText("Delete");
        btn_dlte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_dlteActionPerformed(evt);
            }
        });

        btn_back.setBackground(new java.awt.Color(172, 216, 230));
        btn_back.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btn_back.setText("<- Back");
        btn_back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_backActionPerformed(evt);
            }
        });

        lbl_patientLabel1.setFont(new java.awt.Font("Myanmar Text", 1, 30)); // NOI18N
        lbl_patientLabel1.setForeground(new java.awt.Color(255, 255, 255));
        lbl_patientLabel1.setText("ADMIN CONTROL");

        check_Nurse.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        check_Nurse.setText("Nurse");
        check_Nurse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                check_NurseActionPerformed(evt);
            }
        });

        check_Doctor.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        check_Doctor.setText("Doctor");
        check_Doctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                check_DoctorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(btn_back)
                                .addGap(148, 148, 148)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addGap(289, 289, 289)
                                    .addComponent(jLabel5))
                                .addComponent(lbl_lastName)
                                .addComponent(txt_lastName)
                                .addComponent(txt_firstName)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(lbl_firstName)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lbl_Status))
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(btn_clr, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(btn_dlte)
                                    .addGap(11, 11, 11)
                                    .addComponent(btn_update, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(btn_insert, javax.swing.GroupLayout.PREFERRED_SIZE, 75, Short.MAX_VALUE))
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addGap(11, 11, 11)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(check_Nurse)
                                        .addComponent(check_Doctor))))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(lbl_patientLabel1)))
                .addContainerGap(43, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(btn_back))
                .addGap(29, 29, 29)
                .addComponent(lbl_patientLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_firstName)
                    .addComponent(lbl_Status))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_firstName, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbl_lastName)
                .addGap(9, 9, 9)
                .addComponent(txt_lastName, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(check_Nurse)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(check_Doctor)
                .addGap(145, 145, 145)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_insert)
                    .addComponent(btn_update)
                    .addComponent(btn_clr)
                    .addComponent(btn_dlte))
                .addContainerGap(39, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 597, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void loadData() {
        try {

            st = con.createStatement();

            DefaultTableModel model = new DefaultTableModel(new String[]{"ID Number", "First Name", "Last Name", "Full Name", "Profession"}, 0);

            // Set the table model
            info_tbl.setModel(model);
            // Query to get all patient details
            String sql = "SELECT * FROM accountdetails";
            pst = con.prepareStatement(sql);
            // Execute the query and get the ResultSet
            ResultSet rs = pst.executeQuery();

            int row = 0;
            while (rs.next()) {
                String id = rs.getString("accIDNumber");
                String first_Name = rs.getString("accFirst_Name");
                String last_Name = rs.getString("accLast_Name");
                String full_Name = rs.getString("accFull_Name");
                String profession = rs.getString("profession");

                // Debugging: Print the fetched data to the console
                System.out.println("First Name: " + first_Name + " Last Name: " + last_Name + ", ID: " + id + ", Profession: " + profession);

                // Add the row to the model
                model.addRow(new Object[]{id, first_Name, last_Name, full_Name, profession});
            }
            System.out.println(row);

            // Close ResultSet and PreparedStatement to free up resources
            rs.close();
            pst.close();

        } catch (SQLException ex) {
            ex.printStackTrace(); // Print the error details for debugging
        }
    }
    private void info_tblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_info_tblMouseClicked
        DefaultTableModel tblModel = (DefaultTableModel) info_tbl.getModel();

        String tblFirst_Name = tblModel.getValueAt(info_tbl.getSelectedRow(), 1).toString();
        String tblLast_Name = tblModel.getValueAt(info_tbl.getSelectedRow(), 2).toString();

        txt_firstName.setText(tblFirst_Name);
        txt_lastName.setText(tblLast_Name);
    }//GEN-LAST:event_info_tblMouseClicked

    private void btn_backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_backActionPerformed
        // TODO add your handling code here:
        LoginNurse main = new LoginNurse();
        main.setLocationRelativeTo(null);
        main.setResizable(false);
        this.dispose();
        main.setTitle("Nurse Menu");
        main.setVisible(true);
    }//GEN-LAST:event_btn_backActionPerformed

    private void btn_dlteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_dlteActionPerformed
        DefaultTableModel tblModel = (DefaultTableModel) info_tbl.getModel();

        // Check if a row is selected
        if (info_tbl.getSelectedRowCount() == 1) {
            // Get the selected row index
            int selectedRowIndex = info_tbl.getSelectedRow();

            // Retrieve the accIDNumber for the selected record (assuming it's in the first column)
            String accIDNumber = tblModel.getValueAt(selectedRowIndex, 0).toString(); // Adjust column index as necessary

            // Construct SQL DELETE query
            String deleteQuery = "DELETE FROM accountdetails WHERE accIDNumber = ?";

            try {
                // Prepare statement to avoid SQL injection
                PreparedStatement pstmt = con.prepareStatement(deleteQuery);
                pstmt.setString(1, accIDNumber); // Set the accIDNumber as the parameter

                // Execute the delete
                int rowsAffected = pstmt.executeUpdate();

                // Check if the delete was successful
                if (rowsAffected > 0) {
                    // Remove the row from the table model
                    tblModel.removeRow(selectedRowIndex);
                    lbl_Status.setText("Data Deleted");
                    lbl_Status.setForeground(Color.RED);
                    txt_firstName.setText(""); // Clear text field
                    txt_lastName.setText(""); // Clear text field
                    check_Doctor.setSelected(false);
                    check_Nurse.setSelected(false);
                    JOptionPane.showMessageDialog(this, "Deleted Successfully!");

                } else {
                    JOptionPane.showMessageDialog(this, "Delete failed. Please try again.");
                }
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error deleting from the database: " + e.getMessage());
            }
        } else {
            if (info_tbl.getSelectedRowCount() == 0) {
                JOptionPane.showMessageDialog(this, "There is no Data in the Table! ");
            } else {
                JOptionPane.showMessageDialog(this, "Please Select a row to delete");
            }
        }

        lbl_Status.setText("Status");
        lbl_Status.setForeground(Color.BLACK);

    }//GEN-LAST:event_btn_dlteActionPerformed

    private void btn_clrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_clrActionPerformed
        lbl_Status.setText("Cleared");
        lbl_Status.setForeground(Color.BLUE);
        txt_firstName.setText("");
        txt_lastName.setText("");
    }//GEN-LAST:event_btn_clrActionPerformed

    private void btn_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_updateActionPerformed
        DefaultTableModel tblModel = (DefaultTableModel) info_tbl.getModel();

        String profession = "";
        if (info_tbl.getSelectedRowCount() == 1) {
            // Get the selected row index
            int selectedRowIndex = info_tbl.getSelectedRow();

            // Retrieve the accIDNumber for the selected record (assuming it's in the first column)
            String accIDNumber = tblModel.getValueAt(selectedRowIndex, 0).toString(); // Adjust column index as necessary

            if (!check_Doctor.isSelected() && !check_Nurse.isSelected()) {
                JOptionPane.showMessageDialog(this, "You Must Choose a Profession!");
                return;
            } else if (check_Doctor.isSelected() && check_Nurse.isSelected()) {
                JOptionPane.showMessageDialog(this, "You Can Only Select One Profession!");
                return;
            } else if (check_Nurse.isSelected()) {
                profession = "Nurse";
            } else if (check_Doctor.isSelected()) {
                profession = "Doctor";
            }

            // Get new values from the text fields
            String firstName = txt_firstName.getText();
            String lastName = txt_lastName.getText();
            String fullName = firstName + " " + lastName;

            // Construct SQL UPDATE query
            String updateQuery = "UPDATE accountdetails SET accFirst_Name = ?, accLast_Name = ?, accFull_Name = ?, profession = ? WHERE accIDNumber = ?";

            try (PreparedStatement pstmt = con.prepareStatement(updateQuery)) {
                pstmt.setString(1, firstName);
                pstmt.setString(2, lastName);
                pstmt.setString(3, fullName);
                pstmt.setString(4, profession);
                pstmt.setString(5, accIDNumber);

                // Execute the update
                int rowsAffected = pstmt.executeUpdate();

                // Check if the update was successful
                if (rowsAffected > 0) {
                    // Update the table model to reflect changes
                    tblModel.setValueAt(firstName, selectedRowIndex, 1); // Assuming first name is in the second column
                    tblModel.setValueAt(lastName, selectedRowIndex, 2); // Assuming last name is in the third column
                    tblModel.setValueAt(fullName, selectedRowIndex, 3); // Assuming full name is in the fourth column
                    tblModel.setValueAt(profession, selectedRowIndex, 4);

                    JOptionPane.showMessageDialog(this, "Updated Successfully!");
                    lbl_Status.setText("Status");
                    lbl_Status.setForeground(Color.BLACK);
                    lbl_Status.setText("Updated Successfully");
                } else {
                    JOptionPane.showMessageDialog(this, "Update failed. Please try again.");
                }
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error updating the database: " + e.getMessage());
                Logger.getLogger(Administrator.class.getName()).log(Level.SEVERE, null, e);
            }
        } else {
            if (info_tbl.getSelectedRowCount() == 0) {
                JOptionPane.showMessageDialog(this, "There is no Data in the Table: Update Unavailable");
            } else {
                JOptionPane.showMessageDialog(this, "Please Select a row to update");
            }
        }

        // Clear text fields and checkboxes
        txt_firstName.setText(""); // Clear to empty string
        txt_lastName.setText(""); // Clear to empty string
        check_Doctor.setSelected(false);
        check_Nurse.setSelected(false);
        lbl_Status.setText("Status");
        lbl_Status.setForeground(Color.BLACK);
    }//GEN-LAST:event_btn_updateActionPerformed

    //INSERT BUTTON
    private void btn_insertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_insertActionPerformed
        String first_Name, last_Name, IDNumber, profession = "";

        if ("".equals(txt_firstName.getText()) || "".equals(txt_lastName.getText())) {
            JOptionPane.showMessageDialog(new JFrame(), "Please fill up the text areas to insert");
        } else {

            if (!check_Doctor.isSelected() && !check_Nurse.isSelected()) {
                JOptionPane.showMessageDialog(this, "You Must Choose a Profession!");
                return;
            } else if (check_Doctor.isSelected() && check_Nurse.isSelected()) {
                JOptionPane.showMessageDialog(this, "You Can Only Select One Profession!");
                return;
            } else if (check_Nurse.isSelected()) {
                profession = "Nurse";
            } else if (check_Doctor.isSelected()) {
                profession = "Doctor";
            }

            first_Name = txt_firstName.getText();
            last_Name = txt_lastName.getText();
            String full_Name = first_Name + " " + last_Name;

            Random rand = new Random();

            int currentYear = LocalDate.now().getYear();
            int randomInt = 10000 + rand.nextInt(10000);

            IDNumber = String.format("%d%04d", currentYear, randomInt);

            int row = 0;

            try {
                String sql = "SELECT MAX(row) AS maxRow FROM accountdetails";
                ResultSet rs = st.executeQuery(sql);

                if (rs.next()) {
                    row = rs.getInt("maxRow") + 1; // Increment the max row by 1
                }
                rs.close();
            } catch (SQLException ex) {
                Logger.getLogger(Administrator.class.getName()).log(Level.SEVERE, null, ex);
            }

            String queryData = "INSERT INTO accountdetails (row, accIDNumber, accFirst_Name, accLast_Name, accFull_Name, profession) "
                    + "VALUES ('" + row + "','" + IDNumber + "','" + first_Name + "','" + last_Name + "','" + full_Name + "','" + profession + "')";

            try {
                st.execute(queryData);
            } catch (SQLException ex) {
                Logger.getLogger(Administrator.class.getName()).log(Level.SEVERE, null, ex);
            }

            lbl_Status.setText("Added Successfully");
            lbl_Status.setForeground(Color.GREEN);
            txt_firstName.setText("");
            txt_lastName.setText("");
            check_Doctor.setSelected(false);
            check_Nurse.setSelected(false);
            loadData();
        }
    }//GEN-LAST:event_btn_insertActionPerformed

    private void check_NurseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_check_NurseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_check_NurseActionPerformed

    private void check_DoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_check_DoctorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_check_DoctorActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Administrator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Administrator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Administrator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Administrator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Administrator main = new Administrator();
                main.loadData();
                main.setLocationRelativeTo(null);
                main.setResizable(false);
                main.setTitle("Administrator");
                main.setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_back;
    private javax.swing.JButton btn_clr;
    private javax.swing.JButton btn_dlte;
    private javax.swing.JButton btn_insert;
    private javax.swing.JButton btn_update;
    private javax.swing.JCheckBox check_Doctor;
    private javax.swing.JCheckBox check_Nurse;
    private javax.swing.JTable info_tbl;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinner1;
    private java.awt.Label label1;
    private javax.swing.JLabel lbl_Status;
    private javax.swing.JLabel lbl_firstName;
    private javax.swing.JLabel lbl_lastName;
    private javax.swing.JLabel lbl_patientLabel;
    private javax.swing.JLabel lbl_patientLabel1;
    private javax.swing.JTextField txt_firstName;
    private javax.swing.JTextField txt_lastName;
    // End of variables declaration//GEN-END:variables
}
